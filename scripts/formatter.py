# formatter.py - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
from typing import List, Dict, Any
from datetime import datetime
from tabulate import tabulate
import textwrap
from colorama import init, Fore, Back, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
init(autoreset=True)


class Formatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.max_width = 120  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤—ã–≤–æ–¥–∞
        self.description_width = 50  # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è
    
    def _truncate_text(self, text: str, max_length: int) -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è"""
        if not text:
            return ""
        if len(text) <= max_length:
            return text
        return text[:max_length-3] + "..."
    
    def _wrap_text(self, text: str, width: int) -> str:
        """–ü–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        return '\n'.join(textwrap.wrap(text, width))
    
    def _colorize_rating(self, rating: str) -> str:
        """–¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        rating_colors = {
            'G': Fore.GREEN,
            'PG': Fore.CYAN,
            'PG-13': Fore.YELLOW,
            'R': Fore.MAGENTA,
            'NC-17': Fore.RED
        }
        color = rating_colors.get(rating, Fore.WHITE)
        return f"{color}{rating}{Style.RESET_ALL}"
    
    def _colorize_year(self, year: int) -> str:
        """–¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –≥–æ–¥–∞"""
        if year >= 2010:
            return f"{Fore.GREEN}{year}{Style.RESET_ALL}"
        elif year >= 2000:
            return f"{Fore.YELLOW}{year}{Style.RESET_ALL}"
        else:
            return f"{Fore.CYAN}{year}{Style.RESET_ALL}"
    
    def format_films_table(self, films: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        if not films:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_data = []
        for i, film in enumerate(films, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            row = [
                f"{Fore.CYAN}{i}{Style.RESET_ALL}",
                f"{Fore.WHITE}{self._truncate_text(film.get('title', 'N/A'), 30)}{Style.RESET_ALL}",
                self._colorize_year(film.get('release_year', 0)),
                self._colorize_rating(film.get('rating', 'N/A')),
                f"{film.get('length', 0)} –º–∏–Ω",
                self._truncate_text(film.get('genres', 'N/A'), 30),
                self._truncate_text(film.get('description', 'N/A'), 50)
            ]
            table_data.append(row)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ü–≤–µ—Ç–æ–º
        headers = [
            f"{Fore.YELLOW}#{Style.RESET_ALL}",
            f"{Fore.YELLOW}–ù–∞–∑–≤–∞–Ω–∏–µ{Style.RESET_ALL}",
            f"{Fore.YELLOW}–ì–æ–¥{Style.RESET_ALL}",
            f"{Fore.YELLOW}–†–µ–π—Ç–∏–Ω–≥{Style.RESET_ALL}",
            f"{Fore.YELLOW}–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å{Style.RESET_ALL}",
            f"{Fore.YELLOW}–ñ–∞–Ω—Ä—ã{Style.RESET_ALL}",
            f"{Fore.YELLOW}–û–ø–∏—Å–∞–Ω–∏–µ{Style.RESET_ALL}"
        ]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table = tabulate(
            table_data,
            headers=headers,
            tablefmt="fancy_grid",
            numalign="left",
            stralign="left"
        )
        
        return table
    
    def format_films_cards(self, films: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫"""
        if not films:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        cards = []
        for i, film in enumerate(films, 1):
            card = f"""
{Fore.CYAN}{'='*60}{Style.RESET_ALL}
{Fore.YELLOW}#{i}{Style.RESET_ALL} {Fore.WHITE}{Style.BRIGHT}{film.get('title', 'N/A')}{Style.RESET_ALL}
{Fore.CYAN}{'‚îÄ'*60}{Style.RESET_ALL}
üìÖ –ì–æ–¥: {self._colorize_year(film.get('release_year', 0))}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {self._colorize_rating(film.get('rating', 'N/A'))}
‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film.get('length', 0)} –º–∏–Ω
üé≠ –ñ–∞–Ω—Ä—ã: {film.get('genres', 'N/A')}

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{self._wrap_text(film.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'), 58)}
{Fore.CYAN}{'='*60}{Style.RESET_ALL}"""
            cards.append(card)
        
        return '\n'.join(cards)
    
    def format_genres_list(self, genres: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤"""
        if not genres:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∂–∞–Ω—Ä–∞—Ö"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∏–ª—å–º–æ–≤
        sorted_genres = sorted(genres, key=lambda x: x['film_count'], reverse=True)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_data = []
        for i, genre in enumerate(sorted_genres, 1):
            # –¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            count = genre['film_count']
            if count >= 60:
                count_str = f"{Fore.GREEN}{count}{Style.RESET_ALL}"
            elif count >= 40:
                count_str = f"{Fore.YELLOW}{count}{Style.RESET_ALL}"
            else:
                count_str = f"{Fore.CYAN}{count}{Style.RESET_ALL}"
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            bar_length = min(30, count // 2)
            bar = f"{Fore.GREEN}{'‚ñà' * bar_length}{Style.RESET_ALL}"
            
            row = [
                f"{Fore.CYAN}{i}{Style.RESET_ALL}",
                f"{Fore.WHITE}{genre['name']}{Style.RESET_ALL}",
                count_str,
                bar
            ]
            table_data.append(row)
        
        headers = [
            f"{Fore.YELLOW}#{Style.RESET_ALL}",
            f"{Fore.YELLOW}–ñ–∞–Ω—Ä{Style.RESET_ALL}",
            f"{Fore.YELLOW}–§–∏–ª—å–º–æ–≤{Style.RESET_ALL}",
            f"{Fore.YELLOW}–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å{Style.RESET_ALL}"
        ]
        
        table = tabulate(
            table_data,
            headers=headers,
            tablefmt="rounded_outline",
            numalign="left",
            stralign="left"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_films = sum(g['film_count'] for g in genres)
        avg_films = total_films // len(genres) if genres else 0
        
        stats = f"""
{Fore.CYAN}{'‚îÄ'*60}{Style.RESET_ALL}
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  ‚Ä¢ –í—Å–µ–≥–æ –∂–∞–Ω—Ä–æ–≤: {Fore.GREEN}{len(genres)}{Style.RESET_ALL}
  ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∏–ª—å–º–æ–≤: {Fore.GREEN}{total_films}{Style.RESET_ALL}
  ‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –∂–∞–Ω—Ä: {Fore.YELLOW}{avg_films}{Style.RESET_ALL}
{Fore.CYAN}{'‚îÄ'*60}{Style.RESET_ALL}"""
        
        return table + stats
    
    def format_popular_searches(self, searches: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if not searches:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"
        
        table_data = []
        max_count = max(s.get('count', 0) for s in searches) if searches else 1
        
        for i, search in enumerate(searches, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            params = search.get('params', {})
            if isinstance(params, dict):
                if 'keyword' in params:
                    param_str = f"üîç {params['keyword']}"
                elif 'genre' in params:
                    param_str = f"üé¨ {params['genre']} ({params.get('start_year', '?')}-{params.get('end_year', '?')})"
                else:
                    param_str = str(params)
            else:
                param_str = str(params)
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            count = search.get('count', 0)
            bar_length = int((count / max_count) * 30) if max_count > 0 else 0
            bar = f"{Fore.RED}{'‚ñà' * bar_length}{Style.RESET_ALL}"
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            if i <= 3:
                rank = f"{Fore.YELLOW}üèÜ {i}{Style.RESET_ALL}"
            else:
                rank = f"{Fore.CYAN}{i}{Style.RESET_ALL}"
            
            row = [
                rank,
                search.get('search_type', 'N/A'),
                param_str,
                f"{Fore.GREEN}{count}{Style.RESET_ALL}",
                bar
            ]
            table_data.append(row)
        
        headers = [
            f"{Fore.YELLOW}–ú–µ—Å—Ç–æ{Style.RESET_ALL}",
            f"{Fore.YELLOW}–¢–∏–ø{Style.RESET_ALL}",
            f"{Fore.YELLOW}–ó–∞–ø—Ä–æ—Å{Style.RESET_ALL}",
            f"{Fore.YELLOW}–ü–æ–≤—Ç–æ—Ä–æ–≤{Style.RESET_ALL}",
            f"{Fore.YELLOW}–ì—Ä–∞—Ñ–∏–∫{Style.RESET_ALL}"
        ]
        
        table = tabulate(
            table_data,
            headers=headers,
            tablefmt="rounded_outline",
            numalign="left",
            stralign="left"
        )
        
        return f"\n{Fore.RED}üî• –¢–û–ü –ó–ê–ü–†–û–°–û–í üî•{Style.RESET_ALL}\n{table}"
    
    def format_recent_searches(self, searches: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if not searches:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"
        
        table_data = []
        
        for i, search in enumerate(searches, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            timestamp = search.get('timestamp', '')
            if timestamp:
                try:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    time_str = dt.strftime('%d.%m.%Y %H:%M:%S')
                    # –¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏
                    time_diff = (datetime.now() - dt.replace(tzinfo=None)).total_seconds()
                    if time_diff < 3600:  # –ú–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
                        time_str = f"{Fore.GREEN}{time_str} üÜï{Style.RESET_ALL}"
                    elif time_diff < 86400:  # –ú–µ–Ω–µ–µ –¥–Ω—è –Ω–∞–∑–∞–¥
                        time_str = f"{Fore.YELLOW}{time_str}{Style.RESET_ALL}"
                    else:
                        time_str = f"{Fore.CYAN}{time_str}{Style.RESET_ALL}"
                except:
                    time_str = timestamp
            else:
                time_str = "N/A"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            params = search.get('params', {})
            if isinstance(params, dict):
                if 'keyword' in params:
                    param_str = f"üîç {params['keyword']}"
                elif 'genre' in params:
                    param_str = f"üé¨ {params['genre']} ({params.get('start_year', '?')}-{params.get('end_year', '?')})"
                else:
                    param_str = str(params)
            else:
                param_str = str(params)
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results = search.get('results_count', 0)
            if results == 0:
                results_str = f"{Fore.RED}0 ‚ùå{Style.RESET_ALL}"
            elif results < 10:
                results_str = f"{Fore.YELLOW}{results}{Style.RESET_ALL}"
            else:
                results_str = f"{Fore.GREEN}{results} ‚úÖ{Style.RESET_ALL}"
            
            row = [
                f"{Fore.CYAN}{i}{Style.RESET_ALL}",
                time_str,
                search.get('search_type', 'N/A'),
                param_str,
                results_str
            ]
            table_data.append(row)
        
        headers = [
            f"{Fore.YELLOW}#{Style.RESET_ALL}",
            f"{Fore.YELLOW}–í—Ä–µ–º—è{Style.RESET_ALL}",
            f"{Fore.YELLOW}–¢–∏–ø{Style.RESET_ALL}",
            f"{Fore.YELLOW}–ó–∞–ø—Ä–æ—Å{Style.RESET_ALL}",
            f"{Fore.YELLOW}–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤{Style.RESET_ALL}"
        ]
        
        table = tabulate(
            table_data,
            headers=headers,
            tablefmt="rounded_outline",
            numalign="left",
            stralign="left"
        )
        
        return f"\n{Fore.CYAN}üïí –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–†–û–°–´ üïí{Style.RESET_ALL}\n{table}"
    
    def format_welcome_banner(self) -> str:
        """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        banner = f"""
{Fore.CYAN}{'‚ïê'*70}{Style.RESET_ALL}
{Fore.YELLOW}{Style.BRIGHT}
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
{Style.RESET_ALL}
           {Fore.WHITE}üé¨ MOVIE DATABASE SEARCH SYSTEM üé¨{Style.RESET_ALL}
                {Fore.CYAN}Powered by MySQL & MongoDB{Style.RESET_ALL}
{Fore.CYAN}{'‚ïê'*70}{Style.RESET_ALL}
"""
        return banner
    
    def format_statistics_dashboard(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        dashboard = f"""
{Fore.CYAN}{'‚ïê'*70}{Style.RESET_ALL}
{Fore.YELLOW}{Style.BRIGHT}üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´{Style.RESET_ALL}
{Fore.CYAN}{'‚îÄ'*70}{Style.RESET_ALL}

{Fore.GREEN}–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:{Style.RESET_ALL}
  ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∏–ª—å–º–æ–≤: {Fore.WHITE}{stats.get('total_films', 0)}{Style.RESET_ALL}
  ‚Ä¢ –í—Å–µ–≥–æ –∂–∞–Ω—Ä–æ–≤: {Fore.WHITE}{stats.get('total_genres', 0)}{Style.RESET_ALL}
  ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {Fore.WHITE}{stats.get('year_range', 'N/A')}{Style.RESET_ALL}

{Fore.YELLOW}–ü–æ–∏—Å–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:{Style.RESET_ALL}
  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {Fore.WHITE}{stats.get('total_searches', 0)}{Style.RESET_ALL}
  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {Fore.WHITE}{stats.get('unique_searches', 0)}{Style.RESET_ALL}
  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {Fore.WHITE}{stats.get('avg_results', 0):.1f} —Ñ–∏–ª—å–º–æ–≤{Style.RESET_ALL}

{Fore.MAGENTA}–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:{Style.RESET_ALL}
  ‚Ä¢ –¢–æ–ø –∂–∞–Ω—Ä: {Fore.WHITE}{stats.get('top_genre', 'N/A')}{Style.RESET_ALL}
  ‚Ä¢ –¢–æ–ø –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {Fore.WHITE}{stats.get('top_keyword', 'N/A')}{Style.RESET_ALL}
  ‚Ä¢ –ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è: {Fore.WHITE}{stats.get('peak_time', 'N/A')}{Style.RESET_ALL}

{Fore.CYAN}{'‚ïê'*70}{Style.RESET_ALL}
"""
        return dashboard