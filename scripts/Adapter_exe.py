#!/usr/bin/env python
"""
launch_tmdb_fixed.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å –¥–ª—è TMDB
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python launch_tmdb_fixed.py
"""

import sys
import os
import re
import pymysql
print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TMDB –∞–¥–∞–ø—Ç–µ—Ä–∞ v2...")

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from mysql_connector import MySQLConnector

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
_original_init = MySQLConnector.__init__
_original_select = MySQLConnector.select
_original_test = MySQLConnector.test_connection

class TMDBAdapterV2:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è TMDB"""
    
    @staticmethod
    def adapt_sql(sql):
        """–£–º–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è SQL —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º"""
        original = sql
        
        # –û—Ç–ª–∞–¥–∫–∞
        if 'film' in sql.lower():
            print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SQL —Å 'film'...")
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        sql = sql.replace('film_category', 'movie_genres')
        sql = sql.replace('film_actor', 'cast_credits')
        
        # 2. –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É film -> movies
        sql = re.sub(r'\bfilm\b', 'movies', sql)
        sql = re.sub(r'\bFILM\b', 'MOVIES', sql)
        
        # 3. –ó–∞–º–µ–Ω—è–µ–º category -> genres
        sql = re.sub(r'\bcategory\b', 'genres', sql)
        sql = re.sub(r'\bCATEGORY\b', 'GENRES', sql)
        
        # 4. –ó–∞–º–µ–Ω—è–µ–º actor -> people
        sql = re.sub(r'\bactor\b', 'people', sql)
        sql = re.sub(r'\bACTOR\b', 'PEOPLE', sql)
        
        # 5. –ó–∞–º–µ–Ω—è–µ–º ID –ø–æ–ª—è
        sql = sql.replace('film_id', 'tmdb_id')
        sql = sql.replace('category_id', 'genre_id')
        sql = sql.replace('actor_id', 'person_id')
        
        # 6. –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—è
        sql = sql.replace('.description', '.overview')
        sql = sql.replace('`description`', '`overview`')
        sql = sql.replace(' description,', ' overview,')
        sql = sql.replace(' description ', ' overview ')
        
        sql = sql.replace('.length', '.runtime')
        sql = sql.replace('`length`', '`runtime`')
        sql = sql.replace(' length,', ' runtime,')
        sql = sql.replace(' length ', ' runtime ')
        
        sql = sql.replace('.rating', '.vote_average')
        sql = sql.replace('`rating`', '`vote_average`')
        sql = sql.replace(' rating,', ' vote_average,')
        sql = sql.replace(' rating ', ' vote_average ')
        
        # 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ release_year
        if 'YEAR(m.release_date) as release_year' not in sql and 'YEAR(release_date) as release_year' not in sql:
            sql = re.sub(r'(\w+)\.release_year', r'YEAR(\1.release_date)', sql)
            sql = re.sub(r'\brelease_year\b', 'YEAR(release_date)', sql)
        
        # 8. –í–ê–ñ–ù–û: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∞–∫—Ç–µ—Ä–æ–≤ –≤–æ –í–°–ï–• —á–∞—Å—Ç—è—Ö –∑–∞–ø—Ä–æ—Å–∞
        # –°–Ω–∞—á–∞–ª–∞ CONCAT
        sql = sql.replace("CONCAT(a.first_name,' ',a.last_name)", 'a.name')
        sql = sql.replace("CONCAT(a.first_name, ' ', a.last_name)", 'a.name')
        
        # –ü–æ—Ç–æ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–≤–∫–ª—é—á–∞—è ORDER BY!)
        sql = sql.replace('a.first_name', 'a.name')
        sql = sql.replace('a.last_name', 'a.name')  # –í TMDB –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ORDER BY —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤
        sql = sql.replace('ORDER BY a.name SEPARATOR', 'ORDER BY a.name SEPARATOR')
        
        # 9. –£–±–∏—Ä–∞–µ–º FIELD –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        sql = re.sub(r"FIELD\([^)]+\)", '1', sql)
        
        if sql != original:
            print(f"‚úÖ SQL –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω")
            
        return sql
    
    @staticmethod
    def adapt_results(results):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not results:
            return results
            
        adapted = []
        for row in results:
            new_row = {}
            for key, value in row.items():
                if key == 'tmdb_id':
                    new_row['film_id'] = value
                elif key == 'overview':
                    new_row['description'] = value or ''
                elif key == 'runtime':
                    new_row['length'] = value
                elif key == 'vote_average':
                    if value is None:
                        new_row['rating'] = 'NR'
                    elif value >= 8:
                        new_row['rating'] = 'G'
                    elif value >= 7:
                        new_row['rating'] = 'PG'
                    elif value >= 6:
                        new_row['rating'] = 'PG-13'
                    elif value >= 5:
                        new_row['rating'] = 'R'
                    else:
                        new_row['rating'] = 'NC-17'
                elif key == 'genre_id':
                    new_row['category_id'] = value
                elif key == 'person_id':
                    new_row['actor_id'] = value
                else:
                    new_row[key] = value
                    
            adapted.append(new_row)
            
        return adapted

# –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥—ã
def patched_init(self):
    _original_init(self)
    print("‚úÖ TMDB –∞–¥–∞–ø—Ç–µ—Ä v2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

def patched_select(self, sql, params=None, args=None):
    adapted_sql = TMDBAdapterV2.adapt_sql(sql)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
    if 'f.YEAR(' in adapted_sql or '.YEAR(' in adapted_sql:
        print("‚ö†Ô∏è  –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è YEAR...")
        adapted_sql = adapted_sql.replace('f.YEAR(', 'YEAR(f.')
        adapted_sql = adapted_sql.replace('.YEAR(', 'YEAR(')
    
    try:
        results = _original_select(self, adapted_sql, params, args)
        return TMDBAdapterV2.adapt_results(results)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ SQL: {e}")
        print(f"üìù –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å:\n{adapted_sql}\n")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É
        if 'film' in str(e).lower():
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ 'film'")
        raise

def patched_test(self):
    result = _original_test(self)
    if result:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TMDB —É—Å–ø–µ—à–Ω–æ")
    return result

# –ú–µ—Ç–æ–¥—ã –¥–ª—è –∂–∞–Ω—Ä–æ–≤ –∏ –≥–æ–¥–æ–≤
def patched_get_genres(self):
    try:
        sql = """
            SELECT g.genre_id as category_id, g.name, COUNT(mg.tmdb_id) as film_count
            FROM genres g
            LEFT JOIN movie_genres mg ON g.genre_id = mg.genre_id
            GROUP BY g.genre_id, g.name
            ORDER BY g.name
        """
        results = self.select(sql)
        return results if results else get_default_genres()
    except:
        return get_default_genres()

def get_default_genres():
    return [
        {'name': 'Action', 'category_id': 28, 'film_count': 1000},
        {'name': 'Adventure', 'category_id': 12, 'film_count': 1000},
        {'name': 'Animation', 'category_id': 16, 'film_count': 1000},
        {'name': 'Comedy', 'category_id': 35, 'film_count': 1000},
        {'name': 'Crime', 'category_id': 80, 'film_count': 1000},
        {'name': 'Documentary', 'category_id': 99, 'film_count': 1000},
        {'name': 'Drama', 'category_id': 18, 'film_count': 1000},
        {'name': 'Family', 'category_id': 10751, 'film_count': 1000},
        {'name': 'Fantasy', 'category_id': 14, 'film_count': 1000},
        {'name': 'Horror', 'category_id': 27, 'film_count': 1000},
        {'name': 'Mystery', 'category_id': 9648, 'film_count': 1000},
        {'name': 'Romance', 'category_id': 10749, 'film_count': 1000},
        {'name': 'Science Fiction', 'category_id': 878, 'film_count': 1000},
        {'name': 'Thriller', 'category_id': 53, 'film_count': 1000},
        {'name': 'War', 'category_id': 10752, 'film_count': 1000},
        {'name': 'Western', 'category_id': 37, 'film_count': 1000}
    ]

def patched_get_years(self):
    try:
        sql = """
            SELECT YEAR(MIN(release_date)) as min_year, YEAR(MAX(release_date)) as max_year
            FROM movies
            WHERE release_date IS NOT NULL
        """
        results = self.select(sql)
        if results and results[0]['min_year']:
            return results[0]['min_year'], results[0]['max_year']
    except:
        pass
    return 1900, 2025

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç select
# tmdb_fixes.py - –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ launch_tmdb_fixed.py –ü–ï–†–ï–î —Å—Ç—Ä–æ–∫–æ–π "import main_gui3"

# 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ñ–ê–ù–†–ê–ú–ò
# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é patched_search_by_genre_and_years –Ω–∞ —ç—Ç—É:

def patched_search_by_genre_and_years(self, genre, start_year, end_year, offset=0, limit=10):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º - –ë–ï–ó –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    try:
        # –ü—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –∫ TMDB —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        with self.get_connection() as conn:
            with conn.cursor(pymysql.cursors.DictCursor) as cursor:
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                count_sql = """
                    SELECT COUNT(DISTINCT m.tmdb_id) as total
                    FROM movies m
                    JOIN movie_genres mg ON m.tmdb_id = mg.tmdb_id
                    JOIN genres g ON mg.genre_id = g.genre_id
                    WHERE g.name = %s 
                    AND YEAR(m.release_date) BETWEEN %s AND %s
                """
                cursor.execute(count_sql, (genre, start_year, end_year))
                total_count = cursor.fetchone()['total']
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã
                search_sql = """
                    SELECT DISTINCT
                        m.tmdb_id as film_id,
                        m.title,
                        YEAR(m.release_date) as release_year,
                        m.runtime as length,
                        m.vote_average,
                        m.overview as description,
                        GROUP_CONCAT(DISTINCT g2.name ORDER BY g2.name SEPARATOR ', ') as genres
                    FROM movies m
                    JOIN movie_genres mg ON m.tmdb_id = mg.tmdb_id
                    JOIN genres g ON mg.genre_id = g.genre_id
                    LEFT JOIN movie_genres mg2 ON m.tmdb_id = mg2.tmdb_id
                    LEFT JOIN genres g2 ON mg2.genre_id = g2.genre_id
                    WHERE g.name = %s 
                    AND YEAR(m.release_date) BETWEEN %s AND %s
                    GROUP BY m.tmdb_id, m.title, release_year, m.runtime, m.vote_average, m.overview
                    ORDER BY release_year DESC, m.title
                    LIMIT %s OFFSET %s
                """
                cursor.execute(search_sql, (genre, start_year, end_year, limit, offset))
                films = cursor.fetchall()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
                for film in films:
                    vote_avg = film.pop('vote_average', None)
                    if vote_avg is None:
                        film['rating'] = 'NR'
                    elif vote_avg >= 8:
                        film['rating'] = 'G'
                    elif vote_avg >= 7:
                        film['rating'] = 'PG'
                    elif vote_avg >= 6:
                        film['rating'] = 'PG-13'
                    elif vote_avg >= 5:
                        film['rating'] = 'R'
                    else:
                        film['rating'] = 'NC-17'
                
                return films, total_count
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ search_by_genre_and_years: {e}")
        return [], 0


# 2. –ü–†–û–í–ï–†–ö–ê TMDB API –¥–ª—è –ø–æ—Å—Ç–µ—Ä–æ–≤
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:

def test_tmdb_api():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã TMDB API"""
    try:
        # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        import json
        import os
        
        settings_file = os.path.join(os.path.expanduser("~"), ".sakila_cache", "settings.json")
        
        if os.path.exists(settings_file):
            with open(settings_file, 'r') as f:
                settings = json.load(f)
                api_key = settings.get('tmdb_api_key', '')
                
                if api_key:
                    print(f"‚úÖ TMDB API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:8]}...")
                    
                    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                    import requests
                    test_url = f"https://api.themoviedb.org/3/movie/550?api_key={api_key}"
                    response = requests.get(test_url, timeout=5)
                    
                    if response.status_code == 200:
                        print("‚úÖ TMDB API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        data = response.json()
                        if 'poster_path' in data:
                            print(f"‚úÖ –ü–æ—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω: {data['poster_path']}")
                    else:
                        print(f"‚ùå TMDB API –æ—à–∏–±–∫–∞: {response.status_code}")
                else:
                    print("‚ùå TMDB API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                    print("   –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á")
                    print("   –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: https://www.themoviedb.org/settings/api")
        else:
            print("‚ùå –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ TMDB API –∫–ª—é—á")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")

# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API
print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TMDB API –¥–ª—è –ø–æ—Å—Ç–µ—Ä–æ–≤...")
test_tmdb_api()

# 3. –ü–ê–¢–ß –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TMDB_API_KEY
# –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ main_gui3 –Ω–æ –ü–ï–†–ï–î main_gui3.main():

def patch_tmdb_api():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç TMDB API –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        import json
        import os
        
        settings_file = os.path.join(os.path.expanduser("~"), ".sakila_cache", "settings.json")
        
        if os.path.exists(settings_file):
            with open(settings_file, 'r') as f:
                settings = json.load(f)
                api_key = settings.get('tmdb_api_key', '')
                
                if api_key and hasattr(main_gui3, 'TMDB_API_KEY'):
                    main_gui3.TMDB_API_KEY = api_key
                    print(f"‚úÖ TMDB API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                    
                    # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if 'TMDB_API_KEY' in dir(main_gui3):
                        setattr(main_gui3, 'TMDB_API_KEY', api_key)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á: {e}")

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è search_by_genre_and_years
MySQLConnector.search_by_genre_and_years = patched_search_by_genre_and_years

# –í–ê–ñ–ù–û: –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ launch_tmdb_fixed.py
# –ü–û–°–õ–ï —Å—Ç—Ä–æ–∫–∏ "import main_gui3" –Ω–æ –ü–ï–†–ï–î "main_gui3.main()":
#
# patch_tmdb_api()
# main_gui3.main()

# –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—á–∏
MySQLConnector.__init__ = patched_init
MySQLConnector.select = patched_select
MySQLConnector.test_connection = patched_test
MySQLConnector.get_available_genres = patched_get_genres
MySQLConnector.get_year_range = patched_get_years
MySQLConnector.search_by_genre_and_years = patched_search_by_genre_and_years

print("‚úÖ TMDB –∞–¥–∞–ø—Ç–µ—Ä v2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...\n")

try:
    import main_gui3
    main_gui3.main()
except Exception as e:
    print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")